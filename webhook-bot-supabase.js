import express from "express"
import TelegramBot from "node-telegram-bot-api"
import OpenAI from "openai"
import { createClient } from "@supabase/supabase-js"
import dotenv from "dotenv"

dotenv.config()

const app = express()
const port = process.env.PORT || 3000

app.use(express.json())

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN
const bot = new TelegramBot(token, { polling: false })
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY })

// Supabase –∫–ª–∏–µ–Ω—Ç
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY)

console.log("ü§ñ Webhook –±–æ—Ç —Å Supabase –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

// –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
async function initDatabase() {
  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const { error: usersError } = await supabase.rpc("create_users_table")

    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π
    const { error: messagesError } = await supabase.rpc("create_messages_table")

    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
  } catch (error) {
    console.log("‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:", error.message)
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
async function saveUser(userId, userData) {
  try {
    const { data, error } = await supabase
      .from("users")
      .upsert({
        user_id: userId,
        username: userData.username,
        first_name: userData.first_name,
        last_name: userData.last_name,
        ai_provider: "openai",
        system_prompt: "assistant",
        updated_at: new Date().toISOString(),
      })
      .select()

    if (error) throw error
    return data
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error)
    return null
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserSettings(userId) {
  try {
    const { data, error } = await supabase.from("users").select("*").eq("user_id", userId).single()

    if (error && error.code !== "PGRST116") throw error

    return (
      data || {
        ai_provider: "openai",
        system_prompt: "assistant",
        temperature: 0.7,
        max_tokens: 1000,
      }
    )
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error)
    return {
      ai_provider: "openai",
      system_prompt: "assistant",
      temperature: 0.7,
      max_tokens: 1000,
    }
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async function saveMessage(userId, message, response, aiProvider) {
  try {
    const { data, error } = await supabase
      .from("messages")
      .insert({
        user_id: userId,
        message: message,
        response: response,
        ai_provider: aiProvider,
        created_at: new Date().toISOString(),
      })
      .select()

    if (error) throw error
    return data
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
    return null
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function getMessageHistory(userId, limit = 10) {
  try {
    const { data, error } = await supabase
      .from("messages")
      .select("message, response")
      .eq("user_id", userId)
      .order("created_at", { ascending: false })
      .limit(limit)

    if (error) throw error

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è OpenAI
    const history = []
    if (data) {
      data.reverse().forEach((msg) => {
        history.push({ role: "user", content: msg.message })
        history.push({ role: "assistant", content: msg.response })
      })
    }

    return history
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:", error)
    return []
  }
}

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function getUserStats(userId) {
  try {
    const { data, error } = await supabase.from("messages").select("ai_provider, created_at").eq("user_id", userId)

    if (error) throw error

    const stats = {
      total_messages: data?.length || 0,
      openai_messages: data?.filter((m) => m.ai_provider === "openai").length || 0,
      perplexity_messages: data?.filter((m) => m.ai_provider === "perplexity").length || 0,
      first_message: data?.[0]?.created_at || null,
    }

    return stats
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error)
    return { total_messages: 0, openai_messages: 0, perplexity_messages: 0 }
  }
}

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
const systemPrompts = {
  assistant: "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  creative: "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  technical: "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  casual: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Å —é–º–æ—Ä–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  teacher: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async function askOpenAI(userId, userMessage, settings) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const history = await getMessageHistory(userId, 5)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = [
      { role: "system", content: systemPrompts[settings.system_prompt] || systemPrompts.assistant },
      ...history,
      { role: "user", content: userMessage },
    ]

    const response = await openai.chat.completions.create({
      model: settings.model || "gpt-4",
      messages: messages,
      temperature: settings.temperature || 0.7,
      max_tokens: settings.max_tokens || 1000,
    })

    const content = response.choices[0].message.content

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    await saveMessage(userId, userMessage, content, "openai")

    return {
      success: true,
      content: content,
      usage: response.usage,
    }
  } catch (error) {
    console.error("OpenAI Error:", error)
    return {
      success: false,
      error: error.message,
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity —Å –∏—Å—Ç–æ—Ä–∏–µ–π
async function askPerplexity(userId, userMessage, settings) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    const history = await getMessageHistory(userId, 5)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messages = [
      { role: "system", content: systemPrompts[settings.system_prompt] || systemPrompts.assistant },
      ...history,
      { role: "user", content: userMessage },
    ]

    const response = await fetch("https://api.perplexity.ai/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${process.env.PERPLEXITY_API_KEY}`,
      },
      body: JSON.stringify({
        model: "llama-3.1-sonar-small-128k-online",
        messages: messages,
        temperature: settings.temperature || 0.7,
        max_tokens: settings.max_tokens || 1000,
      }),
    })

    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.error?.message || "Perplexity API error")
    }

    const content = data.choices[0].message.content

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    await saveMessage(userId, userMessage, content, "perplexity")

    return {
      success: true,
      content: content,
      usage: data.usage,
    }
  } catch (error) {
    console.error("Perplexity Error:", error)
    return {
      success: false,
      error: error.message,
    }
  }
}

// Webhook endpoint
app.post(`/webhook/${token}`, async (req, res) => {
  try {
    await bot.processUpdate(req.body)
    res.status(200).send("OK")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ webhook:", error)
    res.status(500).send("Error")
  }
})

// Health check —Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–∑ Supabase
app.get("/health", async (req, res) => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const { data: usersCount } = await supabase.from("users").select("user_id", { count: "exact" })

    const { data: messagesCount } = await supabase.from("messages").select("id", { count: "exact" })

    res.json({
      status: "OK",
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      webhook_url: `${process.env.WEBHOOK_URL}/webhook/${token}`,
      database: {
        users: usersCount?.length || 0,
        messages: messagesCount?.length || 0,
      },
    })
  } catch (error) {
    res.json({
      status: "OK",
      timestamp: new Date().toISOString(),
      uptime: process.uptime(),
      database_error: error.message,
    })
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
  await saveUser(userId, msg.from)

  const welcomeMessage = `
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Bot —Å Supabase!**

–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! 

üß† **OpenAI GPT** - –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
üîç **Perplexity** - –î–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

üìä **–í—Å–µ –≤–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ Supabase**
‚ö° **–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏**

–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!
`

  await bot.sendMessage(chatId, welcomeMessage, {
    parse_mode: "Markdown",
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üß† OpenAI", callback_data: "ai_openai" },
          { text: "üîç Perplexity", callback_data: "ai_perplexity" },
        ],
        [
          { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "stats" },
          { text: "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data: "clear_history" },
        ],
      ],
    },
  })
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query", async (callbackQuery) => {
  const message = callbackQuery.message
  const chatId = message.chat.id
  const messageId = message.message_id
  const data = callbackQuery.data
  const userId = callbackQuery.from.id

  await bot.answerCallbackQuery(callbackQuery.id)

  switch (data) {
    case "stats":
      const stats = await getUserStats(userId)
      const statsMessage = `
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${callbackQuery.from.first_name}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${stats.total_messages}
üß† OpenAI: ${stats.openai_messages}
üîç Perplexity: ${stats.perplexity_messages}
üìÖ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${stats.first_message ? new Date(stats.first_message).toLocaleDateString("ru-RU") : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}

üíæ –î–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ Supabase
      `

      await bot.editMessageText(statsMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
        },
      })
      break

    case "clear_history":
      try {
        const { error } = await supabase.from("messages").delete().eq("user_id", userId)

        if (error) throw error

        await bot.editMessageText("üóëÔ∏è **–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞!**\n\n–í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.", {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
          },
        })
      } catch (error) {
        await bot.editMessageText("‚ùå **–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏**\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
          },
        })
      }
      break

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...
  }
})

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  const text = msg.text

  if (!text || text.startsWith("/")) return

  await bot.sendChatAction(chatId, "typing")

  try {
    const settings = await getUserSettings(userId)
    const aiProvider = settings.ai_provider || "openai"

    let result
    if (aiProvider === "openai") {
      result = await askOpenAI(userId, text, settings)
    } else {
      result = await askPerplexity(userId, text, settings)
    }

    if (result?.success) {
      await bot.sendMessage(chatId, result.content, {
        reply_to_message_id: msg.message_id,
      })
    } else {
      await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${result?.error}`, {
        reply_to_message_id: msg.message_id,
      })
    }
  } catch (error) {
    console.error("Message processing error:", error)
    await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
  }
})

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
async function setupWebhook() {
  try {
    const fullWebhookUrl = `${process.env.WEBHOOK_URL}/webhook/${token}`
    console.log(`üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook: ${fullWebhookUrl}`)

    await bot.deleteWebHook()
    const result = await bot.setWebHook(fullWebhookUrl, {
      allowed_updates: ["message", "callback_query"],
      drop_pending_updates: true,
    })

    if (result) {
      console.log("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
      const info = await bot.getWebHookInfo()
      console.log("üìä Webhook info:", info.url)
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ webhook:", error)
  }
}

// –ó–∞–ø—É—Å–∫
app.listen(port, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`)

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
  await initDatabase()

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
  if (process.env.WEBHOOK_URL) {
    await setupWebhook()
  }

  console.log("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ —Å Supabase!")
})
