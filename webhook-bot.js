import express from "express"
import TelegramBot from "node-telegram-bot-api"
import OpenAI from "openai"
import { createClient } from "@supabase/supabase-js"
import dotenv from "dotenv"

dotenv.config()

const app = express()
const port = process.env.PORT || 3000

// Middleware
app.use(express.json())

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const token = process.env.TELEGRAM_BOT_TOKEN
const openaiApiKey = process.env.OPENAI_API_KEY
const perplexityApiKey = process.env.PERPLEXITY_API_KEY
const webhookUrl = process.env.WEBHOOK_URL

// –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –ë–ï–ó polling (–¥–ª—è webhook)
const bot = new TelegramBot(token, { polling: false })
const openai = new OpenAI({ apiKey: openaiApiKey })

// Supabase (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ)
const supabase = process.env.SUPABASE_URL ? createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY) : null

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)
const conversations = new Map()
const userSettings = new Map()

console.log("ü§ñ Webhook AI Telegram Bot –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
const systemPrompts = {
  assistant: "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  creative: "–¢—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–∏—Å–∞—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ –æ–±—Ä–∞–∑—ã –∏ –º–µ—Ç–∞—Ñ–æ—Ä—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  technical: "–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –î–∞–≤–∞–π —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  casual: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –û–±—â–∞–π—Å—è –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ –∏ —Å —é–º–æ—Ä–æ–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
  teacher: "–¢—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å. –û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ –≤–µ—â–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.",
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initUser(userId) {
  if (!conversations.has(userId)) {
    conversations.set(userId, [])
  }
  if (!userSettings.has(userId)) {
    userSettings.set(userId, {
      aiProvider: "openai",
      model: "gpt-4",
      temperature: 0.7,
      maxTokens: 1000,
      systemPrompt: "assistant",
    })
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI
async function askOpenAI(messages, settings) {
  try {
    const response = await openai.chat.completions.create({
      model: settings.model,
      messages: messages,
      temperature: settings.temperature,
      max_tokens: settings.maxTokens,
    })

    return {
      success: true,
      content: response.choices[0].message.content,
      usage: response.usage,
    }
  } catch (error) {
    console.error("OpenAI Error:", error)
    return {
      success: false,
      error: error.message,
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity
async function askPerplexity(messages, settings) {
  try {
    const response = await fetch("https://api.perplexity.ai/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${perplexityApiKey}`,
      },
      body: JSON.stringify({
        model: "llama-3.1-sonar-small-128k-online",
        messages: messages,
        temperature: settings.temperature,
        max_tokens: settings.maxTokens,
      }),
    })

    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.error?.message || "Perplexity API error")
    }

    return {
      success: true,
      content: data.choices[0].message.content,
      usage: data.usage,
    }
  } catch (error) {
    console.error("Perplexity Error:", error)
    return {
      success: false,
      error: error.message,
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò
async function getAIResponse(userId, userMessage, provider = null) {
  const conversation = conversations.get(userId) || []
  const settings = userSettings.get(userId)
  const aiProvider = provider || settings.aiProvider

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
  const systemMessage = {
    role: "system",
    content: systemPrompts[settings.systemPrompt] || systemPrompts.assistant,
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  conversation.push({ role: "user", content: userMessage })

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–æ–æ–±—â–µ–Ω–∏–π + —Å–∏—Å—Ç–µ–º–∞)
  const messages = [systemMessage, ...conversation.slice(-8)]

  let result
  if (aiProvider === "openai") {
    result = await askOpenAI(messages, settings)
  } else if (aiProvider === "perplexity") {
    result = await askPerplexity(messages, settings)
  }

  if (result?.success) {
    conversation.push({ role: "assistant", content: result.content })
    conversations.set(userId, conversation)
  }

  return result
}

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
function getMainKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "üß† OpenAI GPT", callback_data: "ai_openai" },
          { text: "üîç Perplexity", callback_data: "ai_perplexity" },
        ],
        [
          { text: "üí≠ –ù–æ–≤—ã–π —á–∞—Ç", callback_data: "new_chat" },
          { text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data: "stats" },
        ],
        [
          { text: "üé≠ –†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è", callback_data: "change_prompt" },
          { text: "‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data: "help" },
        ],
      ],
    },
  }
}

function getPromptKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç", callback_data: "prompt_assistant" },
          { text: "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π", callback_data: "prompt_creative" },
        ],
        [
          { text: "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", callback_data: "prompt_technical" },
          { text: "üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", callback_data: "prompt_casual" },
        ],
        [
          { text: "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å", callback_data: "prompt_teacher" },
          { text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" },
        ],
      ],
    },
  }
}

// Webhook endpoint
app.post(`/webhook/${token}`, async (req, res) => {
  try {
    console.log("üì® –ü–æ–ª—É—á–µ–Ω webhook –∑–∞–ø—Ä–æ—Å")

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await bot.processUpdate(req.body)

    res.status(200).send("OK")
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ webhook:", error)
    res.status(500).send("Error")
  }
})

// Health check endpoint
app.get("/health", (req, res) => {
  res.json({
    status: "OK",
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    webhook_url: `${webhookUrl}/webhook/${token}`,
    users: conversations.size,
  })
})

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get("/stats", (req, res) => {
  res.json({
    total_users: conversations.size,
    total_conversations: Array.from(conversations.values()).reduce((sum, conv) => sum + conv.length, 0),
    uptime: process.uptime(),
    memory_usage: process.memoryUsage(),
  })
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id

  initUser(userId)

  const welcomeMessage = `
ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AI Telegram Bot!**

–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}! –Ø —Ä–∞–±–æ—Ç–∞—é —á–µ—Ä–µ–∑ **Webhook** –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!

üß† **OpenAI GPT** - –î–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∞–Ω–∞–ª–∏–∑–∞
üîç **Perplexity** - –î–ª—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ

‚ú® **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Webhook:**
‚Ä¢ ‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
‚Ä¢ üîÑ –ù–∞–¥–µ–∂–Ω–∞—è —Ä–∞–±–æ—Ç–∞
‚Ä¢ üìà –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å
‚Ä¢ üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!
`

  await bot.sendMessage(chatId, welcomeMessage, {
    parse_mode: "Markdown",
    ...getMainKeyboard(),
  })
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on("callback_query", async (callbackQuery) => {
  const message = callbackQuery.message
  const chatId = message.chat.id
  const messageId = message.message_id
  const data = callbackQuery.data
  const userId = callbackQuery.from.id

  initUser(userId)
  await bot.answerCallbackQuery(callbackQuery.id)

  const settings = userSettings.get(userId)

  switch (data) {
    case "ai_openai":
      settings.aiProvider = "openai"
      userSettings.set(userId, settings)

      await bot.editMessageText(
        "üß† **OpenAI GPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è GPT. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:\n‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á\n‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π\n\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!",
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
          },
        },
      )
      break

    case "ai_perplexity":
      settings.aiProvider = "perplexity"
      userSettings.set(userId, settings)

      await bot.editMessageText(
        "üîç **Perplexity –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑—É—è Perplexity AI. –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:\n‚Ä¢ –ü–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n‚Ä¢ –ù–æ–≤–æ—Å—Ç–µ–π –∏ —Å–æ–±—ã—Ç–∏–π\n‚Ä¢ –§–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å!",
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
          },
        },
      )
      break

    case "new_chat":
      conversations.set(userId, [])
      await bot.editMessageText(
        "üí≠ **–ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç!**\n\n–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.\n\n–¢–µ–∫—É—â–∏–π –ò–ò: " +
          (settings.aiProvider === "openai" ? "üß† OpenAI GPT" : "üîç Perplexity"),
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          reply_markup: {
            inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
          },
        },
      )
      break

    case "stats":
      const conversation = conversations.get(userId) || []
      const currentAI = settings.aiProvider === "openai" ? "üß† OpenAI GPT" : "üîç Perplexity"

      const statsMessage = `
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${callbackQuery.from.first_name}
ü§ñ –¢–µ–∫—É—â–∏–π –ò–ò: ${currentAI}
üé≠ –†–µ–∂–∏–º: ${settings.systemPrompt}
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: ${conversation.length}
üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${settings.temperature}
üìù –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω—ã: ${settings.maxTokens}
üß† –ú–æ–¥–µ–ª—å: ${settings.model}

üìà –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞: ${conversations.size}
‚ö° –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook
      `

      await bot.editMessageText(statsMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
        },
      })
      break

    case "change_prompt":
      await bot.editMessageText(
        "üé≠ **–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:**\n\n–ö–∞–∂–¥—ã–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–æ–≤ –ò–ò –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞—á–∏.",
        {
          chat_id: chatId,
          message_id: messageId,
          parse_mode: "Markdown",
          ...getPromptKeyboard(),
        },
      )
      break

    case "help":
      const helpMessage = `
‚ÑπÔ∏è **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /new - –ù–æ–≤—ã–π —á–∞—Ç
‚Ä¢ /openai - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ OpenAI
‚Ä¢ /perplexity - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ Perplexity

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. –í—ã–±–µ—Ä–∏—Ç–µ –ò–ò (OpenAI –∏–ª–∏ Perplexity)
2. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è
3. –ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å
4. –ü–æ–ª—É—á–∏—Ç–µ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç!

**OpenAI –ª—É—á—à–µ –¥–ª—è:**
‚Ä¢ –¢–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á
‚Ä¢ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π

**Perplexity –ª—É—á—à–µ –¥–ª—è:**
‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –ü–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
‚Ä¢ –§–∞–∫—Ç–æ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π

‚ö° **–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ Webhook –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏!**
      `

      await bot.editMessageText(helpMessage, {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [[{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }]],
        },
      })
      break

    case "back_main":
      await bot.editMessageText("üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
        chat_id: chatId,
        message_id: messageId,
        parse_mode: "Markdown",
        ...getMainKeyboard(),
      })
      break

    default:
      if (data.startsWith("prompt_")) {
        const promptType = data.replace("prompt_", "")
        settings.systemPrompt = promptType
        userSettings.set(userId, settings)

        const promptNames = {
          assistant: "ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç",
          creative: "üé® –ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π",
          technical: "‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π",
          casual: "üòä –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
          teacher: "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å",
        }

        await bot.editMessageText(
          `‚úÖ –í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: **${promptNames[promptType]}**\n\n${systemPrompts[promptType]}\n\n–¢–µ–ø–µ—Ä—å –ò–ò –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ!`,
          {
            chat_id: chatId,
            message_id: messageId,
            parse_mode: "Markdown",
            reply_markup: {
              inline_keyboard: [
                [{ text: "üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data: "change_prompt" }],
                [{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "back_main" }],
              ],
            },
          },
        )
      }
      break
  }
})

// –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã
bot.onText(/\/new/, async (msg) => {
  const userId = msg.from.id
  conversations.set(userId, [])
  await bot.sendMessage(msg.chat.id, "üí≠ –ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç! –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞.")
})

bot.onText(/\/openai/, async (msg) => {
  const userId = msg.from.id
  initUser(userId)
  const settings = userSettings.get(userId)
  settings.aiProvider = "openai"
  userSettings.set(userId, settings)
  await bot.sendMessage(msg.chat.id, "üß† –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ OpenAI GPT!")
})

bot.onText(/\/perplexity/, async (msg) => {
  const userId = msg.from.id
  initUser(userId)
  const settings = userSettings.get(userId)
  settings.aiProvider = "perplexity"
  userSettings.set(userId, settings)
  await bot.sendMessage(msg.chat.id, "üîç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ Perplexity!")
})

// –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on("message", async (msg) => {
  const chatId = msg.chat.id
  const userId = msg.from.id
  const text = msg.text

  // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  if (!text || text.startsWith("/") || msg.photo) return

  initUser(userId)

  const settings = userSettings.get(userId)
  const aiProvider = settings.aiProvider
  const aiName = aiProvider === "openai" ? "üß† OpenAI" : "üîç Perplexity"

  await bot.sendChatAction(chatId, "typing")

  try {
    const processingMsg = await bot.sendMessage(chatId, `${aiName} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å... ‚è≥`)

    const result = await getAIResponse(userId, text)

    await bot.deleteMessage(chatId, processingMsg.message_id).catch(() => {})

    if (result?.success) {
      const response = result.content
      const maxLength = 4000

      if (response.length <= maxLength) {
        await bot.sendMessage(chatId, response, {
          reply_to_message_id: msg.message_id,
        })
      } else {
        // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const parts = []
        for (let i = 0; i < response.length; i += maxLength) {
          parts.push(response.substring(i, i + maxLength))
        }

        for (let i = 0; i < parts.length; i++) {
          const partMessage = `**–ß–∞—Å—Ç—å ${i + 1}/${parts.length}:**\n\n${parts[i]}`
          await bot.sendMessage(chatId, partMessage, {
            parse_mode: "Markdown",
            reply_to_message_id: i === 0 ? msg.message_id : undefined,
          })

          if (i < parts.length - 1) {
            await new Promise((resolve) => setTimeout(resolve, 1000))
          }
        }
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
      if (result.usage) {
        const usageInfo = `üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${result.usage.total_tokens || "N/A"}`
        await bot.sendMessage(chatId, usageInfo, {
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üí≠ –ù–æ–≤—ã–π —á–∞—Ç", callback_data: "new_chat" },
                { text: "üîÑ –°–º–µ–Ω–∏—Ç—å –ò–ò", callback_data: aiProvider === "openai" ? "ai_perplexity" : "ai_openai" },
              ],
            ],
          },
        })
      }
    } else {
      await bot.sendMessage(
        chatId,
        `‚ùå –û—à–∏–±–∫–∞ ${aiName}:\n\n${result?.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n‚Ä¢ –°–º–µ–Ω–∏—Ç—å –ò–ò\n‚Ä¢ –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç`,
        {
          reply_to_message_id: msg.message_id,
          reply_markup: {
            inline_keyboard: [
              [
                { text: "üí≠ –ù–æ–≤—ã–π —á–∞—Ç", callback_data: "new_chat" },
                { text: "üîÑ –°–º–µ–Ω–∏—Ç—å –ò–ò", callback_data: aiProvider === "openai" ? "ai_perplexity" : "ai_openai" },
              ],
            ],
          },
        },
      )
    }
  } catch (error) {
    console.error("Message processing error:", error)
    await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
      reply_to_message_id: msg.message_id,
    })
  }
})

// –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
async function setupWebhook() {
  try {
    const fullWebhookUrl = `${webhookUrl}/webhook/${token}`

    console.log(`üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook: ${fullWebhookUrl}`)

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook
    await bot.deleteWebHook()
    console.log("üóëÔ∏è –°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª–µ–Ω")

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    const result = await bot.setWebHook(fullWebhookUrl, {
      allowed_updates: ["message", "callback_query"],
      drop_pending_updates: true,
    })

    if (result) {
      console.log("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å webhook
      const webhookInfo = await bot.getWebHookInfo()
      console.log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:", {
        url: webhookInfo.url,
        pending_updates: webhookInfo.pending_update_count,
        last_error: webhookInfo.last_error_message,
      })
    } else {
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:", error.message)
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on("error", (error) => {
  console.error("Bot error:", error)
})

// Graceful shutdown
process.on("SIGINT", async () => {
  console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
  try {
    await bot.deleteWebHook()
    console.log("üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω")
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:", error)
  }
  process.exit(0)
})

process.on("SIGTERM", async () => {
  console.log("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
  try {
    await bot.deleteWebHook()
    console.log("üóëÔ∏è Webhook —É–¥–∞–ª–µ–Ω")
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook:", error)
  }
  process.exit(0)
})

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, async () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`)
  console.log(`üåê Webhook URL: ${webhookUrl}/webhook/${token}`)
  console.log(`üíö Health check: ${webhookUrl}/health`)
  console.log(`üìä Stats: ${webhookUrl}/stats`)

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
  if (webhookUrl) {
    await setupWebhook()
  } else {
    console.log("‚ö†Ô∏è WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
  }

  console.log("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ —á–µ—Ä–µ–∑ webhook!")
})
