import dotenv from "dotenv"

dotenv.config()

const token = process.env.TELEGRAM_BOT_TOKEN
const webhookUrl = process.env.WEBHOOK_URL

console.log("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")

if (!token) {
  console.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
  process.exit(1)
}

if (!webhookUrl) {
  console.error("‚ùå WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
  process.exit(1)
}

async function testWebhook() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    console.log("ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞...")
    const botResponse = await fetch(`https://api.telegram.org/bot${token}/getMe`)
    const botData = await botResponse.json()

    if (botData.ok) {
      console.log(`‚úÖ –ë–æ—Ç: @${botData.result.username} (${botData.result.first_name})`)
    } else {
      console.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞:", botData.description)
      return
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
    console.log("üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook...")
    const webhookResponse = await fetch(`https://api.telegram.org/bot${token}/getWebhookInfo`)
    const webhookData = await webhookResponse.json()

    if (webhookData.ok) {
      const info = webhookData.result
      console.log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook:")
      console.log(`   URL: ${info.url || "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}`)
      console.log(`   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${info.pending_update_count}`)
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${info.last_error_message || "–ù–µ—Ç"}`)
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    const fullWebhookUrl = `${webhookUrl}/webhook/${token}`
    console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: ${fullWebhookUrl}`)

    const setWebhookResponse = await fetch(`https://api.telegram.org/bot${token}/setWebhook`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        url: fullWebhookUrl,
        allowed_updates: ["message", "callback_query"],
        drop_pending_updates: true,
      }),
    })

    const setWebhookData = await setWebhookResponse.json()

    if (setWebhookData.ok) {
      console.log("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    } else {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:", setWebhookData.description)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook –µ—â–µ —Ä–∞–∑
    console.log("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    const finalCheck = await fetch(`https://api.telegram.org/bot${token}/getWebhookInfo`)
    const finalData = await finalCheck.json()

    if (finalData.ok) {
      const info = finalData.result
      console.log("üìä –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
      console.log(`   URL: ${info.url}`)
      console.log(`   –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${info.pending_update_count}`)
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${info.last_error_message || "–ù–µ—Ç"}`)

      if (info.url === fullWebhookUrl) {
        console.log("üéâ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
      } else {
        console.log("‚ö†Ô∏è URL webhook –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
      }
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error.message)
  }
}

testWebhook()
